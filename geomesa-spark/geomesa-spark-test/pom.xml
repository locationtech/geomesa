<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>geomesa-spark_2.12</artifactId>
        <groupId>org.locationtech.geomesa</groupId>
        <version>5.5.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <name>GeoMesa Spark Test</name>
    <artifactId>geomesa-spark-test_2.12</artifactId>

    <description>This module provides the classpath isolation needed to run spark with the GeoMesa runtime shaded jars</description>

    <properties>
        <!-- version used by spark - our json4s is shaded and relocated -->
        <json4s.version>3.6.12</json4s.version>
        <!-- spark uses slf4j 2, only test scoped -->
        <slf4j.version>2.0.17</slf4j.version>
        <maven.test.opens>
          --add-opens=java.base/java.nio=ALL-UNNAMED
          --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
          --add-opens=java.base/java.lang.invoke=ALL-UNNAMED
          --add-opens=java.base/java.util=ALL-UNNAMED
        </maven.test.opens>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2-core_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2-junit_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <!-- we're using reload4j -->
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-slf4j2-impl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- orc is shaded in our fs-spark jar, but we still need to exclude it here for some
                     reason or else we get classpath errors -->
                <exclusion>
                    <groupId>org.apache.orc</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.json4s</groupId>
            <artifactId>json4s-core_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.locationtech.geomesa</groupId>
            <artifactId>geomesa-accumulo-spark-runtime-accumulo21_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.locationtech.geomesa</groupId>
            <artifactId>geomesa-accumulo-distributed-runtime_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.locationtech.geomesa</groupId>
            <artifactId>geomesa-fs-spark-runtime_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.locationtech.geomesa</groupId>
            <artifactId>geomesa-gt-spark-runtime_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.locationtech.geomesa</groupId>
            <artifactId>geomesa-spark-converter_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
        </dependency>
        <dependency>
            <groupId>org.geomesa.testcontainers</groupId>
            <artifactId>testcontainers-accumulo</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.scala-logging</groupId>
            <artifactId>scala-logging_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <systemPropertyVariables>
                            <spark.serializer>org.apache.spark.serializer.KryoSerializer</spark.serializer>
                            <spark.kryo.registrator>org.locationtech.geomesa.spark.GeoMesaSparkKryoRegistrator</spark.kryo.registrator>
                            <spark.worker.cores>${test.spark.worker.cores}</spark.worker.cores>
                            <spark.worker.memory>${test.spark.worker.memory}</spark.worker.memory>
                        </systemPropertyVariables>
                        <reuseForks>false</reuseForks> <!-- spark contexts interfere with each other if re-using forks -->
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <configuration>
                        <systemPropertyVariables>
                            <spark.serializer>org.apache.spark.serializer.KryoSerializer</spark.serializer>
                            <spark.kryo.registrator>org.locationtech.geomesa.spark.GeoMesaSparkKryoRegistrator</spark.kryo.registrator>
                            <spark.worker.cores>${test.spark.worker.cores}</spark.worker.cores>
                            <spark.worker.memory>${test.spark.worker.memory}</spark.worker.memory>
                        </systemPropertyVariables>
                        <reuseForks>false</reuseForks>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
