geomesa {
  sfts {
    "osm-nodes" = {
      type-name = "osm-nodes"
      attributes = [
        { name = "user", type = "String" }
        { name = "tags", type = "String", json = "true" }
        { name = "dtg",  type = "Date" }
        { name = "geom", type = "Point", srid = "4326", default = "true" }
      ]
      user-data = {
        geomesa.indices.enabled = "z2,id"
        geomesa.table.sharing = "false"
      }
    }
    "osm-ways" = {
      type-name = "osm-ways"
      attributes = [
        { name = "user", type = "String" }
        { name = "name", type = "String" }
        { name = "tags", type = "String", json = "true" }
        { name = "dtg",  type = "Date" }
        { name = "geom", type = "LineString", srid = "4326", default = "true" }
      ]
      user-data = {
        geomesa.indices.enabled = "xz2,id"
        geomesa.table.sharing = "false"
      }
    }
  }
  converters {
    "osm-nodes" = {
      type         = "osm-nodes"
      format       = "pbf" // or xml
      id-field     = "$id"
      fields = [
        // valid attributes are id, geometry, tags, timestamp, user, uid, version, changeset
        { name = "id",   attribute = "id", transform = "toString($0)" }
        { name = "user", attribute = "user" }
        { name = "tags", attribute = "tags", transform = "mapToJson($0)" }
        { name = "dtg",  attribute = "timestamp" }
        { name = "geom", attribute = "geometry" }
      ]
      options {
        validators = [ "has-geo" ]
      }
    }
    "osm-ways" = {
      type         = "osm-ways"
      format       = "pbf" // or xml
      id-field     = "$id"
      // if not specified, will use a local h2 database for caching nodes
      // for larger files, a real database should be used instead
      // jdbc      = "jdbc:postgresql://localhost/test"
      fields = [
        // valid attributes are id, geometry, tags, timestamp, user, uid, version, changeset
        { name = "id",     attribute = "id", transform = "toString($0)" }
        { name = "user",   attribute = "user" }
        { name = "tagMap", attribute = "tags" }
        { name = "tags",   transform = "mapToJson($tagMap)" }
        { name = "name",   transform = "mapValue($tagMap, 'name')" }
        { name = "dtg",  attribute = "timestamp" }
        { name = "geom",   attribute = "geometry" }
      ]
      options {
        validators = [ "has-geo" ]
      }
    }
  }
}
